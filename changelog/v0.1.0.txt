# Changelog - Version 0.1.0

## Release Date
2025-08-03

## Overview
Initial release of Metis high-performance caching library with comprehensive features and 95% test coverage.

## #New
- High-performance sharded caching library with 95% test coverage
- WTinyLFU (Windowed TinyLFU) eviction policy for optimal hit rates
- LRU (Least Recently Used) eviction policy for general-purpose caching
- Multi-level configuration system: programmatic, JSON file, and environment variables
- Intelligent configuration validator with performance optimization suggestions
- Built-in Gzip compression for memory optimization
- Comprehensive observability with detailed statistics (hits, misses, hit rate)
- CLI tools for debugging and profiling cache performance
- Robust serialization using Go's `gob` package
- Use-case specific constructors (WebServer, APIGateway, Development)
- Extensive benchmarking and performance testing suite

## #Updated
- Enhanced error handling and edge case management
- Improved memory efficiency and garbage collection patterns
- Optimized sharding algorithm for better concurrency

## #Corrected
- Resolved CI/CD pipeline issues and test reliability
- Fixed compression header handling in edge cases
- Improved configuration validation logic for varying CPU core counts
- Enhanced security scanning and dependency management

## #Features
- `New()` - Create cache with custom configuration
- `WebServer()` - Optimized constructor for web server use cases
- `APIGateway()` - Optimized constructor for API gateway scenarios
- `Development()` - Constructor for development and testing
- `Set()` - Store key-value pairs with optional TTL
- `Get()` - Retrieve values with hit/miss statistics
- `Delete()` - Remove items from cache
- `Clear()` - Clear entire cache
- `Stats()` - Get detailed cache statistics
- `Serialize()` - Export cache to gob format
- `Deserialize()` - Import cache from gob format
- `Close()` - Clean shutdown with resource cleanup

## #Compatibility
- Go 1.21+ compatibility
- MPL-2.0 license
- Cross-platform support (Windows, Linux, macOS)
- High performance with minimal memory overhead
- Thread-safe operations
- No security vulnerabilities detected by gosec
