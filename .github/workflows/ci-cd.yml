name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.5'
        cache: true
    
    - name: Install dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Run tests with coverage
      run: go test -v -coverprofile=coverage.out -covermode=atomic ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted. Please run 'go fmt ./...'"
          gofmt -s -d .
          exit 1
        fi
    
    - name: Install golint
      run: go install golang.org/x/lint/golint@latest
    
    - name: Run golint
      run: golint ./...
    
    - name: Install staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest
    
    - name: Run staticcheck
      run: staticcheck ./...

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.5'
    
    - name: Install gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest
    
    - name: Run gosec with exclusions
      run: |
        # Run gosec excluding known false positives
        # G204: Subprocess launched with variable - false positive for test helpers
        # G103: unsafe.Pointer usage - false positive for performance-critical string-to-byte conversion
        # G115: integer overflow - false positive due to proper bounds checking
        # G404: weak random - false positive for performance profiler
        # G304: file inclusion - false positive due to path validation implemented
        gosec -exclude=G204,G103,G115,G404,G304 ./...
      
    - name: Run gosec for remaining issues only
      run: |
        # Run a second pass to show only the issues we care about
        echo "=== Security Scan Results ==="
        echo "Excluded rules (false positives):"
        echo "- G204: Subprocess launched with variable (test helpers)"
        echo "- G103: unsafe.Pointer usage (performance-critical hashing)"
        echo "- G115: integer overflow (proper bounds checking implemented)"
        echo "- G404: weak random (performance profiler context)"
        echo "- G304: file inclusion (path validation implemented)"
        echo ""
        echo "Remaining issues:"
        gosec -exclude=G204,G103,G115,G404,G304 -fmt=text ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.5'
        cache: true
    
    - name: Build for multiple platforms
      run: |
        # Build for Linux
        GOOS=linux GOARCH=amd64 go build -o bin/metis-linux-amd64 ./cmd/metis-cli
        GOOS=linux GOARCH=arm64 go build -o bin/metis-linux-arm64 ./cmd/metis-cli
        
        # Build for Windows
        GOOS=windows GOARCH=amd64 go build -o bin/metis-windows-amd64.exe ./cmd/metis-cli
        
        # Build for macOS
        GOOS=darwin GOARCH=amd64 go build -o bin/metis-darwin-amd64 ./cmd/metis-cli
        GOOS=darwin GOARCH=arm64 go build -o bin/metis-darwin-arm64 ./cmd/metis-cli
    
    - name: Build profiler
      run: |
        GOOS=linux GOARCH=amd64 go build -o bin/profiler-linux-amd64 ./cmd/profiler
        GOOS=windows GOARCH=amd64 go build -o bin/profiler-windows-amd64.exe ./cmd/profiler
        GOOS=darwin GOARCH=amd64 go build -o bin/profiler-darwin-amd64 ./cmd/profiler
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: metis-binaries
        path: bin/
        retention-days: 30

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.5'
        cache: true
    
    - name: Run benchmarks
      run: |
        echo "Running benchmarks..."
        go test -bench=. -benchmem ./... > benchmark-results.txt 2>&1 || true
        
        echo "=== Benchmark Results ==="
        cat benchmark-results.txt
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark-results.txt
        retention-days: 30

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: metis-binaries
        path: bin/
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        draft: false
        prerelease: false
        files: |
          bin/metis-linux-amd64
          bin/metis-windows-amd64.exe
          bin/metis-darwin-amd64
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 